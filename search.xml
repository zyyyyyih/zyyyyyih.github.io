<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156/"/>
      <url>posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的STL</title>
      <link href="posts/553b08ef/"/>
      <url>posts/553b08ef/</url>
      
        <content type="html"><![CDATA[<h1 id="不定长数组：vector"><a href="#不定长数组：vector" class="headerlink" title="不定长数组：vector"></a>不定长数组：vector</h1><p>vector就是一个不定长数组，也就是动态数组，不仅如此，它把一些常用操作“封装”在了vector类型内部。<br>定义：<code>vector&lt;变量类型&gt; 变量名</code><br>例如：现在定义一个<code>vector&lt;int&gt; a</code>则<br><code>a.size()</code>可以读取它的大小<br><code>a.resize()</code>改变大小<br><code>a.push_back()</code>向尾部添加元素<br><code>a.pop_back()</code>删除最后一个元素</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS+BFS</title>
      <link href="posts/dfsbfs/"/>
      <url>posts/dfsbfs/</url>
      
        <content type="html"><![CDATA[<p><strong>两个非常基础且使用范围很广的基本思想</strong></p><p>这其中是通过一些题目来帮助理解和应用</p><blockquote><p>这两个算法很活的，多思考原理</p></blockquote><a id="more"></a><h1 id="DFS（深度优先搜素）"><a href="#DFS（深度优先搜素）" class="headerlink" title="DFS（深度优先搜素）"></a>DFS（深度优先搜素）</h1><p>我们设想这样一个问题，现在有一个可以称作迷宫的地图，我们要判断这个迷宫是否有从起点到终点的路径<br>假设现在有一个6*7的地图，那么我们的任务就是判断<br>我们能否从第一行第一列即（1，1），走到（6，7）<br>如下图<br><img src="https://gitee.com/zyyyyyih/picture-bed/raw/master/img/20210108185229.png" loading="lazy"><br>数据如下</p><pre class="language-none"><code class="language-none">6 70 0 1 1 1 0 11 0 1 0 0 0 11 0 0 1 0 1 11 1 0 0 0 0 11 1 1 1 0 1 11 1 1 1 0 0 0</code></pre><p>当我们使用DFS解决这个问题时，思路应当是</p><ol><li>以（1，1）作为起点，我们对坐标进行操作，得到它相邻点的坐标</li><li>判断这个相邻的点能否作为下一个落脚点，即能不能走</li><li>走到这个点之后，再以这个点作为起点，进行同样的操作</li><li>判断这整个遍历过程中是否存在走到了（6，7）这个点的情况，如果存在，那么这个地图有解，反之无解。<br>于是可以比较容易的得到如下代码<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXM <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token comment">//其实全局变量默认是0</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记为访问过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//找到终点，可以直接结束，这个return其实也可以不要</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否是路，是否越界，是否访问过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化，可不要</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>请理解后，去尝试一下这到经典的DFS题目<a href="https://www.luogu.com.cn/problem/P1219">八皇后</a></li></ol><h1 id="BFS（广度优先搜索）"><a href="#BFS（广度优先搜索）" class="headerlink" title="BFS（广度优先搜索）"></a>BFS（广度优先搜索）</h1><h2 id="DFS可以代替吗"><a href="#DFS可以代替吗" class="headerlink" title="DFS可以代替吗"></a>DFS可以代替吗</h2><p>我们直接看到这道题<a href="https://www.luogu.com.cn/problem/P1162">填涂颜色</a></p><p><img src="https://gitee.com/zyyyyyih/picture-bed/raw/master/img/20210108190437.png" loading="lazy"><br>样例数据<br><strong>INPUT</strong></p><pre class="language-none"><code class="language-none">60 0 0 0 0 00 0 1 1 1 10 1 1 0 0 11 1 0 0 0 11 0 0 0 0 11 1 1 1 1 1</code></pre><p><strong>OUTPUT</strong></p><pre class="language-none"><code class="language-none">0 0 0 0 0 00 0 1 1 1 10 1 1 2 2 11 1 2 2 2 11 2 2 2 2 11 1 1 1 1 1</code></pre><p>来分析一下题目，如果这道题用dfs怎么做</p><ol><li>我们可以找到一个0，并且以它为起点，然后通过dfs去标记所有相连接的0</li><li>再找到一个1，以它为起点，去标记所有相连接的1</li><li>最后再把所有未标记的点的数值变为2</li></ol><p>很容易发现，这样的想法有很多的问题，假如外围的0并不相接呢，是不是需要多个起点才能解决问题</p><p>又或者，其他的想法，比如先找到一个1去标记一圈，然后往中间找0，再全部改成2。</p><p>想法不错，可是这个代码的实现是不是很难完成，要进行各种判断才能确定这个0是在圈内的</p><p>所以我们来看一下BFS有什么解决办法<br>首先BFS的实现离不开队列，这里简单介绍一下队列</p><h3 id="队列简介"><a href="#队列简介" class="headerlink" title="队列简介"></a><queue>队列简介</h3><p>队列是一种数据结构，queue是属于C++函数库中的一个成熟的数据结构，即属于STL<br>通过头文件<code>#include &lt;queue&gt;</code>来引用<br>通过<code>queue&lt;数据类型&gt; 变量名</code>来定义<br>数据从队尾插入，从队首弹出<br>例如：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>Q<span class="token punctuation">;</span><span class="token comment">//定义一个队列名称为Q的队列</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在队列Q的队尾插入一个int类型的数据2</span><span class="token keyword">int</span> a <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个变量a，并将队列Q中位于队首的元素赋值给a</span>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出队首的元素</span><span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果队列为空，Q.empty()的返回值为true，有元素返回fasle</span></code></pre><p>下次详细讲解队列，（）留个链接的位置在这</p><h2 id="BFS怎么实现"><a href="#BFS怎么实现" class="headerlink" title="BFS怎么实现"></a>BFS怎么实现</h2><p>我们来解析代码</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token function">NODE</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//用这个来代替走的步子，看到后面就明白了</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>NODE<span class="token operator">></span> que<span class="token punctuation">;</span><span class="token comment">//定义一个队列</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">//判断这个点是否合法</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NODE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NODE</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NODE</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NODE</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//描边，将所有的外围的点扫描一遍，并放入队列中作为起点</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//算法关键</span><span class="token punctuation">&#123;</span>NODE cur <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出队首的元素</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出这个元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//通过for循环来简化代码，如果不用这个方法的话，就需要像我上面那个未简化的dfs的代码一样，把向上下左右走的情况都列出来</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> nx <span class="token operator">=</span> cur<span class="token punctuation">.</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> cur<span class="token punctuation">.</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用nx和ny表示走的下一步格子</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//这个格子是否合法</span><span class="token punctuation">&#123;</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//标记为访问过</span>b<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//改回0</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NODE</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把这个点作为其他节点的起点加入队列中</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//当队列为空时，就表示所有与起点相连接的点都遍历完了，就会弹空队列，就退出循环，完成了操作</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//我这里是使用了一种小技巧，于算法本身无关，我是先把所有的零都处理成2，然后用bfs把圈外的还原成0</span><span class="token punctuation">&#125;</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数主体</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> n<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出不多说了</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>本题还有很多其他更加优秀的解法，这份代码会更加方便入门bfs，效率并不是最优的<br>练习<a href="https://www.luogu.com.cn/problem/P1135">奇怪的电梯</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="posts/73608288/"/>
      <url>posts/73608288/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p><strong>计算机的储存单位</strong><br>二进制的位，即bit<br>8bit == 一字节<br>1024字节 == 1KB<br>1024KB == 1MB<br>1024MB == 1GB<br>1024GB == 1TB<br><strong><em>小扩展</em></strong><br>你们可能还在测网速时见过几十兆的网速，但是实际使用只有几mb/s<br>或者办了个100兆的宽带<br>他们的单位其实是Mbps<br>Mbps是megabits per second的缩写，是一种传输速率单位，指每秒传输的位（比特）数量。<br>单位是兆位每秒。<br>所以100Mbps == （100 / 8）MB/s</p><p>回到计算机储存<br>计算机的内存是以字节为单位的一片连续的储存空间，每一个字节都有一个编号，这个编号就称为<strong>内存地址</strong><br><strong>每个变量的地址是指该变量所占储存单元的第一个字节的地址</strong><br>上面这句加粗的话要重点理解，对后面的指针的各种操作和理解有很大作用</p><p>我们先来看一个例子，理解上面这几句话的众多细节</p><p>在C/C++源码中<code>int a = 5;</code>会申请一个什么样子的内存呢<br>（先不急着看懂，往下看）<br><img src="https://gitee.com/zyyyyyih/picture-bed/raw/master/img/20201205202838.png" loading="lazy"></p><p>由于<code>int</code>类型的变量申请的是4个字节的内存，而一个字节是有8bit的<br>所以我们会有一个4X8的矩阵，同时前面说过，每一个字节都有一个地址，所以每一行前面都会有一个地址<br>而前面还说过，每个变量的地址是指该变量所占储存单元的第一个字节的地址，所以这个a的地址是第一行的 1250231<br>此时可以通过<code>&amp;a</code>取出a在内存中的地址，为1250231<br>由因为bit是二进制储存的形式，所以将5转换位二进制储存在内存中<br>再回到图中，是不是很清晰了。<br>需要注意的是，int类型的变量是带有符号的，所以在这个4x8的矩阵空间中，第一行第一个，代表的是符号，如果这个空间储存的是1的话，那么它表示，这个是个负数，0则表示这是个正数。</p><h2 id="变量的地址和指针"><a href="#变量的地址和指针" class="headerlink" title="变量的地址和指针"></a>变量的地址和指针</h2><p>首先，它是一种特殊的变量<br>这种变量只是用来存放内存地址的，起名为指针变量<br>假设定义了一个只存地址的变量p<br>把a的地址赋值给指针变量p，则指针变量p的值为1250231<br>接下来，当我们访问a的时候我们访问的是什么？是整数型的变量对应的数值5<br>当我们访问p的时候访问的是什么？是p所储存的地址1250231<br><strong>于是，我们可以通过指针变量间接的访问改地址中原来的值，形式为<code>*p</code></strong></p><h2 id="定义指针变量"><a href="#定义指针变量" class="headerlink" title="定义指针变量"></a>定义指针变量</h2><p>类型名 *指针变量名<br>eg:<code>int *p</code><br>表示p是一个存放int类型变量的地址的一个指针<br>此时有个概念叫，p的基类型是int类型，它只能存放int类型的变量的地址<br>那么如何给它赋值呢？<br>注意：</p><ol><li>定义时赋值   <code>int *p = &amp;a</code></li><li>定义后赋值   <code>p = &amp;a</code></li></ol><p>补充小点：指向指针的指针<br><code>int **p, k, *s = &amp;k;</code><br><code>p = &amp;s;</code><br>这里的p，就是一个指向指针的指针</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉筛</title>
      <link href="posts/96683d0c/"/>
      <url>posts/96683d0c/</url>
      
        <content type="html"><![CDATA[<h1 id="埃氏筛（普通筛法）"><a href="#埃氏筛（普通筛法）" class="headerlink" title="埃氏筛（普通筛法）"></a>埃氏筛（普通筛法）</h1><p><a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95/374984">埃拉托斯特尼筛法</a>，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。<br>时间复杂度为$O(nlogn)$<br>$E = mc^2$<br>$$E = mc^2$$</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>由以上的思想，很容易可以想出相应的算法<br>数学上定义1不是素数也不是合数<br>已知2，3，5…..为素数<br>所以，我们可以使用循环从2开始遍历，直到所需要的大小</p><h3 id="演算过程"><a href="#演算过程" class="headerlink" title="演算过程"></a>演算过程</h3><p>遍历到2时，把2的倍数都标记为不是素数。<br>接着遍历3，判断3未被标记过，于是认定3为素数，把3的倍数都标记以一遍<br>接着遍历4，判断4已经被标记过，所以continue，遍历下一个<br>……</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//用来表示各个数的标记状态的数组，MAXN为所需要的范围，全局变量默认为零，初始化</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">askk</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">//用于查询n是否为素数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> pri<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于储存素数</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//计数器</span>pri<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//第一个素数为2，此时pri[1]的值为2;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//从3开始</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//是否有因数</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//找到了因数直接退出</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> i<span class="token punctuation">)</span><span class="token comment">//此时如果j小于i，表示提前退出了，证明有因数，反之没有，可以将此数储存</span>pri<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="欧拉筛（线性筛法）"><a href="#欧拉筛（线性筛法）" class="headerlink" title="欧拉筛（线性筛法）"></a>欧拉筛（线性筛法）</h1><p>线性筛，复杂度为 $ O(n) $ 。与埃氏筛相比，不会对已经被标记过的合数再进行重复标记，故效率更高。</p><h2 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h2><p>欧拉筛将合数分解为 (最小质因数 * 一个合数) 的形式，通过最小质因数来判断当前合数是否已经被标记过。</p><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><p>先看代码</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存素数</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//是否标记</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Euler_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//没标记就是素数，存起来</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//判断是否越界</span>vis<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//筛数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//时间复杂度为O(n)的关键！</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>欧拉筛的难点就在于对<code>if (i % prime[j] == 0)</code>这步的理解<br>当<code>i % prime[j] == 0</code>时,即i是它的整数倍，令 <code>x = i / prime[j]</code>，那么 <code>i * prime[j + 1]</code> 就可以变为 <code>(x * prime[j+1]) * prime[j]</code><br>这说明 <code>i * prime[j + 1]</code> 是 <code>prime[j]</code> 的整数倍，不需要再进行标记，因为之后会被 prime[j] * 某个数 标记，<br>对之后的素数的倍数进行标记时同理，直接跳出循环，这样就避免了重复标记。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode的C++环境配置</title>
      <link href="posts/9905827f/"/>
      <url>posts/9905827f/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode简介"><a href="#VSCode简介" class="headerlink" title="VSCode简介"></a>VSCode简介</h1><p><a href="https://code.visualstudio.com/">VSCode</a>[是一个纯为本**编辑器**，不是ide（集成开发环境），所以需要给他配置**编译器**才可以发挥功能<br><img src="https://i.niupic.com/images/2020/10/08/8OdY.png" loading="lazy"><br>选择对应的Stable版本即可（本文仅针对Windows）</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>先设置成熟悉的中文，在商店里搜索<code>chinese</code>，安装即可<br>同样的，搜索<code>C/C++</code>，安装<br><img src="https://i.niupic.com/images/2020/10/08/8Oeu.png" loading="lazy"></p><p>转到工作区（侧边栏圈起来的那个），然后点击打开文件夹，我新建一个了test文件夹在我的E盘（请根据你的习惯进行这一步操作）<br><img src="https://i.niupic.com/images/2020/10/08/8Oev.png" loading="lazy"><br>现在这个文件夹是空的，啥都没有。<br>我们先不要动这里</p><p>下面要有所选择</p><h2 id="第一种：C-C-编译器TDM-GCC的安装与配置（本人推荐）"><a href="#第一种：C-C-编译器TDM-GCC的安装与配置（本人推荐）" class="headerlink" title="第一种：C/C++编译器TDM-GCC的安装与配置（本人推荐）"></a>第一种：C/C++编译器TDM-GCC的安装与配置（本人推荐）</h2><p><a href="https://jmeubank.github.io/tdm-gcc/">TDM-GCC_64官网</a><br><img src="https://i.niupic.com/images/2020/10/08/8OgY.png" loading="lazy"><br>我直接搬运下载直连<br><a href="https://github.com/jmeubank/tdm-gcc/releases/download/v9.2.0-tdm64-1/tdm64-gcc-9.2.0.exe">官网的下载直连</a></p><p>选择<code>Create</code>后面全部默认<br><img src="https://i.niupic.com/images/2020/10/08/8OgV.png" loading="lazy"><br><img src="https://i.niupic.com/images/2020/10/08/8OgW.png" loading="lazy"><br><img src="https://i.niupic.com/images/2020/10/08/8OgX.png" loading="lazy"></p><h3 id="一般会直接配置好环境变量，可以自行检查，否则手动配置"><a href="#一般会直接配置好环境变量，可以自行检查，否则手动配置" class="headerlink" title="一般会直接配置好环境变量，可以自行检查，否则手动配置"></a>一般会直接配置好环境变量，可以自行检查，否则手动配置</h3><h1 id="VSCode的配置文件"><a href="#VSCode的配置文件" class="headerlink" title="VSCode的配置文件"></a>VSCode的配置文件</h1><p>回到VSCode<br>创建一个你打算存放代码的文件夹，称作工作区文件夹；路径不能含有中文和引号，最好不要有空格，我用的是<code>E:\test</code>之前创建过了。（C和C++需要分别建立不同的文件夹，除非用虚拟工作区。不要选上一节存放编译器的文件夹，源代码和编译器要分开放。这个先别管。）</p><p>打开VSCode，选打开文件夹，点新建文件夹，名称为<code>.vscode</code>。不在资源管理里新建的原因是Windows的Explorer不允许创建的文件夹第一个字符是点（1903后才支持）。<br>手动创建如下文件，变成这样的效果：<br><img src="https://i.niupic.com/images/2020/10/07/8Mv1.png" loading="lazy"><br>我们先写一个<code>.cpp</code>的文件（新建一个平行于<code>.vscode</code>的文件夹），比如：<br><img src="https://i.niupic.com/images/2020/10/08/8Ofw.png" loading="lazy"><br>然后<code>crtl</code>+<code>s</code>保存，先放在那里不管</p><p>配置每个配置文件：（为了方便小白，直接抄我的就好了）</p><ul><li>编辑<code>c_cpp_properties.json</code><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Win32"</span><span class="token punctuation">,</span>            <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"clang-x64"</span><span class="token punctuation">,</span>            <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/x86_64-w64-mingw32"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/backward"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/x86_64-w64-mingw32/include"</span><span class="token punctuation">,</span>                <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include-fixed"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"_DEBUG"</span><span class="token punctuation">,</span>                <span class="token string">"UNICODE"</span><span class="token punctuation">,</span>                <span class="token string">"__GNUC__=7"</span><span class="token punctuation">,</span>                <span class="token string">"__cdecl=__attribute__((__cdecl__))"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"browse"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/x86_64-w64-mingw32"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/backward"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/x86_64-w64-mingw32/include"</span><span class="token punctuation">,</span>                    <span class="token string">"C:/TDM-GCC-64/lib/gcc/x86_64-w64-mingw32/5.1.0/include-fixed"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\TDM-GCC-64\\bin\\gcc.exe"</span><span class="token punctuation">,</span>            <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c11"</span><span class="token punctuation">,</span>            <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span></code></pre></li><li>编辑<code>tasks.json</code><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span><span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"g++"</span><span class="token punctuation">,</span><span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token string">"-g"</span><span class="token punctuation">,</span>  <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>  <span class="token string">"-o"</span><span class="token punctuation">,</span>  <span class="token string">"$&#123;file&#125;.exe"</span><span class="token punctuation">,</span>  <span class="token string">"-fexec-charset=gbk"</span><span class="token punctuation">,</span>  <span class="token string">"-finput-charset=GBK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>  <span class="token property">"fileLocation"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"relative"</span><span class="token punctuation">,</span><span class="token string">"$&#123;workspaceRoot&#125;"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"pattern"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span><span class="token punctuation">,</span><span class="token property">"file"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"severity"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token property">"message"</span><span class="token operator">:</span> <span class="token number">5</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre></li><li>编辑<code>launch.json</code><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"C++ Launch (GDB)"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"launchOptionType"</span><span class="token operator">:</span> <span class="token string">"Local"</span><span class="token punctuation">,</span>            <span class="token property">"targetArchitecture"</span><span class="token operator">:</span> <span class="token string">"x86"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;file&#125;.exe"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:/TDM-GCC-64/bin/gdb.exe"</span><span class="token punctuation">,</span> <span class="token comment">//路径，根据自己TDM安装位置</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"blackkitty"</span><span class="token punctuation">,</span>                <span class="token string">"1221"</span><span class="token punctuation">,</span>                <span class="token string">"# #"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"g++"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li><li>编辑<code>settings.json</code><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"C_Cpp.errorSquiggles"</span><span class="token operator">:</span> <span class="token string">"Enabled"</span><span class="token punctuation">,</span>    <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"cstdio"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"array"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"atomic"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"*.tcc"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"bitset"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cctype"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cfenv"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"chrono"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cinttypes"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"clocale"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cmath"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"complex"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"condition_variable"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"csetjmp"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"csignal"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdarg"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstddef"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdint"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdlib"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstring"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ctime"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cwchar"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cwctype"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"deque"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"forward_list"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"list"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"unordered_map"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"unordered_set"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"vector"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"exception"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"fstream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"functional"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"future"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"initializer_list"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iomanip"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iosfwd"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"istream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"limits"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"memory"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"mutex"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"new"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"numeric"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ratio"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"scoped_allocator"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"sstream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"stdexcept"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"streambuf"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"system_error"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"thread"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"type_traits"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"tuple"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"typeindex"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"typeinfo"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"utility"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"valarray"</span><span class="token operator">:</span> <span class="token string">"cpp"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.runInTerminal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.saveFileBeforeRun"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.clearPreviousOutput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.ignoreSelection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.preserveFocus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre><h1 id="安装code-runner插件"><a href="#安装code-runner插件" class="headerlink" title="安装code runner插件"></a>安装code runner插件</h1>商店搜索安装即可<br><code>ctrl</code>+<code>alt</code>+<code>n</code>可以编译并运行，在下方的终端进行数据的输入（集成黑框）<br>现在可以愉快的玩耍了<h1 id="DEBUG的使用（调试）"><a href="#DEBUG的使用（调试）" class="headerlink" title="DEBUG的使用（调试）"></a>DEBUG的使用（调试）</h1>暂时咕咕咕</li></ul><h1 id="额外的扩展"><a href="#额外的扩展" class="headerlink" title="额外的扩展"></a>额外的扩展</h1><p>暂时咕咕咕<br><img src="https://i.niupic.com/images/2020/10/08/8Ohd.jpg" loading="lazy"></p><h2 id="第二种：C-C-编译器MINGW的安装与配置（网上大多数教程是这个）"><a href="#第二种：C-C-编译器MINGW的安装与配置（网上大多数教程是这个）" class="headerlink" title="第二种：C/C++编译器MINGW的安装与配置（网上大多数教程是这个）"></a>第二种：C/C++编译器MINGW的安装与配置（网上大多数教程是这个）</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><a href="https://osdn.net/projects/mingw/releases/">MINGW在这里下载</a><br>然后如图<br><img src="https://p3-tt.byteimg.com/origin/pgc-image/7544a762b639436285f1df3450235e3e?from=pc" loading="lazy"></p><p>打开下载好的<code>.exe</code>文件<br><img src="https://p3-tt.byteimg.com/origin/pgc-image/9361b1b671b647c2960b326fe2eec522?from=pc" loading="lazy"><br>可以自行更改安装目录，但是这个东西不大，使用频率也高，我直接装默认C盘<br><img src="https://i.niupic.com/images/2020/10/08/8Oey.png" loading="lazy"><br>进度条走完后点击continue，转到如下界面<br>如图所示<code>Basic Setup</code>-&gt;<code>mingw-gcc-g++</code>-&gt;<code>Mark for Installation</code>，这一步是选择gcc/g++编译器选项，必须勾选这一项。<br><img src="https://i.niupic.com/images/2020/10/08/8OeH.png" loading="lazy"><br>然后再如图安装<code>mingw32-gdb</code>，这个是用于<code>debug</code>的<strong>调试器</strong>，装一下吧，可以用到<br><img src="https://i.niupic.com/images/2020/10/08/8OeG.png" loading="lazy"><br>然后点击菜单栏<code>Installation</code>，在下拉框中选择<code>Apply Changes</code>。然后<code>Apply</code><br><img src="https://i.niupic.com/images/2020/10/08/8OeF.png" loading="lazy"><br>然后等几分钟<br>效果如下，在安装目录中找到如下文件（不要管我的皮肤）<br><img src="https://i.niupic.com/images/2020/10/08/8Of5.png" loading="lazy"></p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><p>为了让系统识别到你的编译器，你还需要配置环境变量。方法如下：</p><ol><li>右击<code>此电脑</code>，选择<code>属性</code></li><li>在弹出的窗口中选择<code>高级系统设置</code></li><li>在弹出的<code>系统属性</code>窗口中，选择<code>高级</code>、<code>环境变量</code></li><li>在弹出的<code>环境变量</code>窗口中，找到系统变量，找到<code>path</code>变量，点击<code>编辑按钮</code>，将g++/gcc/gdb所在目录的路径（例如，我的路径就是<code>C:\MinGW\bin</code>）添加到<code>path</code>变量中（win7用分号隔开，然后输入路径）<br><img src="https://i.niupic.com/images/2020/10/08/8Of6.png" loading="lazy"><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3>在命令行窗口中输入<code>gcc -v</code> <code>g++ -v</code> <code>gdb -v</code>命令，回车执行。如果你看到返回的gcc版本信息，就成功了。如图：（不一定和我一样，反正不出现红色的报错信息就是ok了）<br><img src="https://i.niupic.com/images/2020/10/08/8Ofb.png" loading="lazy"></li></ol><p><del>什么你不会打开cmd？？ <code>win</code>+ <code>r</code> 然后输入<code>cmd</code>，然后回车</del></p><h2 id="第二种的配置文件（我还没研究出来稳定的版本，咕咕咕）"><a href="#第二种的配置文件（我还没研究出来稳定的版本，咕咕咕）" class="headerlink" title="第二种的配置文件（我还没研究出来稳定的版本，咕咕咕）"></a>第二种的配置文件（我还没研究出来稳定的版本，咕咕咕）</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内心的第一次独白</title>
      <link href="posts/myself/"/>
      <url>posts/myself/</url>
      
        <content type="html"><![CDATA[<p>  很早时候就萌生了想要写作这一想法，可以追溯到我小学时代，那时候班上总是不知为何突然开始流行起各种东西，后来也得知貌似全国的班级都是这样，让我至今依然印象深刻的便是风靡一时的“游戏本”和“小说鉴赏大会” <del>我原称之为人人都会经历的中二时期</del>，而我也在那时成为了其中一员。</p><p>  我的游戏本十分受欢迎，可以一直吸引班上的同学成为我的玩家，同样也一直存在强有力的竞争对手，至于游戏本是什么，可以理解为洛克王国、奥拉星这种小游戏，不过是呈现在各式各样的练习本上罢了。可我的小说却一直处于惨淡经营的状态，只有我那时的至交愿意翻阅那么两下，与我不一样，他是班上风云一时的小说作家，他写的很勤快，故事也同样精彩，相比之下，我放弃了写作。当时幼稚的我自然不会想那么多，只是因为得不到认可便被其他事情给吸引了去吧。可这样一件小事就像盗梦空间那样，它在我的内心深处植入了我文笔十分糟糕的潜意识，对我的影响延伸至今。</p><p>  高中时期老师有要求过要阅读指定的文学作品，不出意料，我一本都没碰过，读后感的任务得益于我善于利用发达的网络。我的改变从新冠肺炎时期开始，那时候的我正好经历了一些打击，破碎的三观让我备受煎熬。长假且无法出门的日子，带来的孤独，让我开始思考自己的现状，也开始尝试跨越自己的舒适圈。机缘巧合之下，我接触了二次元，我体会到了虚拟世界中的故事给我带来的快乐、悲伤、愤怒、辛酸……它填充了我空虚的时间，丰富了我的情绪，我也在这许许多多优秀的作品之中，体会到了成长究竟是怎么一回事，甚至毫不夸张的说，它在无形之中，影响了我的人生，一点一点的重建我的三观<em>自然是会结合真实世界的</em>，而我真正的成熟，也从这里开始。</p><p>  我并不是自说自话的认为自己成熟，当老师对我假期之后的改变的看法传入我耳朵里时，我才意识到，自己好像，的确成熟了。我内心逐渐丰富的过程，和这些巨大的转变，所带给我的感受，让我想把它们记录下来，可我总是在我精心准备的笔记本上，写写删删，最后只留下了铅笔被擦除后的印记。</p><p>  原来我还是无法跨越内心的障碍，我过于追求完美，希望我做的事情从头到尾都是优秀的存在，希望它能够带给我认可，哪怕只是来自于自己的认可。</p><p>  高考过后，我再一次陷入了那样的循环之中，总希望记录点什么，可又怕写的烂，这样的想法一直悬于心房，也渐渐被其他事情所充斥掉。这样的我处于一种总觉得自己想做点什么，却又想不起来的状态，这种状态持续到了今天，9月12日。在这之前几天，我的一位朋友仿佛在和我的交谈当中察觉到了什么，便让我做了MBTI测试，最后结果是，我属于INTP这种类型，很巧的是（也许他就是因为这个察觉到的），这位朋友和我一样。在我了解到这种类型人格的优缺点后，开始往自己身上套，实在是，完全一致。我的朋友告诉我，他是通过写作的方式来发泄自己的情绪或是记录下来，也鼓动我去尝试写作，于是就诞生了这段文字。我也许不再拘泥于我的文笔如何，也许不再去分析他人的行为举止，也许不再去思考乱七八糟的观念，只需要记录当下我的人生与感悟，并接纳它。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QQ</title>
      <link href="posts/fe151f88/"/>
      <url>posts/fe151f88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.niupic.com/images/2020/09/10/8EH1.jpg" loading="lazy"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CCT速成</title>
      <link href="posts/ba2a05f9/"/>
      <url>posts/ba2a05f9/</url>
      
        <content type="html"><![CDATA[<p>本文为对CCT同学的个人指导（入门速成）</p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p><strong>C++基本语法（可能会让你读代码说作用）</strong></p><ul><li>cin，cout</li><li>scanf，printf</li><li>数组</li><li>char，string</li><li>if else，switch</li><li>bool</li><li><strong>for</strong>，<strong>while</strong>，*do…while</li><li>函数</li><li>*指针， *引用</li><li><strong>struct</strong>， *class</li><li>深入STL（vector，set，map，queue）</li></ul><p><strong>算法基本概念的了解</strong></p><ul><li>图论（图，树）</li><li>*数论（了解线性筛，欧拉筛，欧几里得和扩展欧几里得就够了）</li><li><strong>搜索（DFS，BFS）</strong></li></ul><h1 id="详解C-基本语法"><a href="#详解C-基本语法" class="headerlink" title="详解C++基本语法"></a>详解C++基本语法</h1><h2 id="cin，cout"><a href="#cin，cout" class="headerlink" title="cin，cout"></a>cin，cout</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a+b="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//endl是换行的意思，可连续使用</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="scanf-printf"><a href="#scanf-printf" class="headerlink" title="scanf,printf"></a>scanf,printf</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token comment">//=这个是赋值符号，不是等号，前面都忘记说了</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://pic.downk.cc/item/5f5720c7160a154a6794dd09.png" loading="lazy"><br>也可以这样赋值</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span><span class="token comment">//只能存一个，eg：输入abcd</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token comment">//输出a</span><span class="token punctuation">&#125;</span></code></pre><p>但是看这个情况</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'acbd'</span><span class="token punctuation">;</span><span class="token comment">//用单引号赋值</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token comment">//输出d</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h3><p><a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin">百度百科</a><br>为什么放在char这里将呢，看代码就懂了</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span><span class="token comment">//这个叫强制类型转换，即强制将char（字符类型）转换成int（整数型）</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果是：<code>97</code><br>对照ASCII表，小写字母a对应着的十进制数正好就是97，这是巧合吗？<br>同样的我们这样操作一下</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果是：<code>a</code><br>出现这样的结果是因为C++语言的字符函数设计是基于这个ASCII表的，过多的不赘述，目前也不要求掌握</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><strong>注意要引入cstring的库</strong><br>string没有字符长度的限制，使用cin读入。以空格或者换行结束读入</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Input：<code>hello world</code><br>Output：<code>hello</code></p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a><strong>if else</strong></h3><p>先理解一下基础</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的值为1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的值不为1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>扩展<br><code>if (a &lt;= 1)</code><br><code>if (a &gt;= 1)</code><br><code>if (a != 1)</code><br><code>if (a &gt; 1 &amp;&amp; a &lt;= 10)</code><br><code>if (a &gt; 1 || a &lt;0)</code><br><code>if (is_prime(a))</code>这个<code>is_prime</code>是一个自己写的函数的名称，现在只需要理解为判断a是否是质数，如果是质数，这条if语句就会得到一个允许进入的值，然后执行<code>&#123;&#125;</code>里面的内容<br><code>...</code></p><h3 id="switch（不是很重要）"><a href="#switch（不是很重要）" class="headerlink" title="switch（不是很重要）"></a>switch（不是很重要）</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 局部变量声明</span>   <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'A'</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"很棒！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'B'</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"做的好！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"还不错"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'D'</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您通过了"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'F'</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最好再试一次"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span> <span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无效的成绩"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"您的成绩是 "</span> <span class="token operator">&lt;&lt;</span> grade <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>梦幻联动前面的知识点，不过多解释，读懂就行</p><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p>bool的值只有两个：<br><code>1</code>和<code>0</code><br>其中<code>1</code>也代表<code>true</code>,<code>0</code>代表<code>false</code><br>请通过一下代码来理解bool的逻辑</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token comment">//输出结果为1,如果a=fasle，那么输出结果为0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token comment">//输出结果仍然为1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>也就是说，除了<code>0</code>以外，其他所有的数在bool这个人面前都是<code>true</code><br>只有<code>0</code>，在它面前是<code>fasle</code></p><p>现在我们回想一下主函数里面的<code>return 0;</code>语句<br>它的意义应该是，返回一个0给操作系统 表示我的程序已经正常结束<br>这也就是竞赛系统中一定要保证自己主函数的返回值是0的原因了<br>但是这并不影响代码在项目中的运行（不必深究）</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"a[i] = "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> Startop<span class="token operator">=></span>operation<span class="token operator">:</span> int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cond<span class="token operator">=></span>condition<span class="token operator">:</span> 是否满足i<span class="token operator">&lt;</span><span class="token number">6</span>op2<span class="token operator">=></span>operation<span class="token operator">:</span> 执行输出代码op3<span class="token operator">=></span>operation<span class="token operator">:</span> 更新循环控制变量ed<span class="token operator">=></span>end<span class="token operator">:</span> 退出循环语句st<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>ed<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op2<span class="token operator">-</span><span class="token operator">></span>op3<span class="token operator">-</span><span class="token operator">></span>cond</code></pre><p>仔细理解一下过程，一定要掌握的<br>另外，<code>for(;;)</code>里面的三条语句并不是一定都要写的<br>实践一下如果不写其中某一条或几条会有什么结果</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a["</span><span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span><span class="token string">"] = "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 开始cond<span class="token operator">=></span>condition<span class="token operator">:</span> 满足i<span class="token operator">&lt;</span><span class="token number">6</span>op<span class="token operator">=></span>operation<span class="token operator">:</span> 执行输出语句ed<span class="token operator">=></span>end<span class="token operator">:</span> 退出循环st<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>ed</code></pre><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个就不写流程图了emmm，高中知识相关</p><p><strong>三种循环语句的区别以及适用场景请大概品一品，目前不要求</strong></p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>字面意思，很好理解<br>这些是用在循环语句中的“控制器”<br><strong>首先都是且只能是用在循环体中</strong><br>break是中止语句，到了这一步就会中止循环体并退出<br>continue是跳过的意思，到了这一步就会直接跳过后面的语句，开始下一次的循环<br>请看实例理解</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">54</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该数组中存在值为54的元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//已经找到了，不用再继续找了,会浪费时间</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该数组中不存在值为54的元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：<code>该数组中存在54的数值，且位于数组中的3位置</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">is_odd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//三目运算符，先不用管</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_odd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//目前只需要理解is_odd(a[i])是判断a[i]是否为奇数的函数，如果是奇数，返回值就为true</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"是该数组中的偶数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><pre class="language-none"><code class="language-none">12是该数组中的偶数34是该数组中的偶数54是该数组中的偶数76是该数组中的偶数</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="指针-和-引用"><a href="#指针-和-引用" class="headerlink" title="指针 和 引用"></a>指针 和 引用</h2><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><h2 id="STL重头戏"><a href="#STL重头戏" class="headerlink" title="STL重头戏"></a>STL重头戏</h2><h1 id="详解算法基本概念"><a href="#详解算法基本概念" class="headerlink" title="详解算法基本概念"></a>详解算法基本概念</h1><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="欧几里得（gcd）"><a href="#欧几里得（gcd）" class="headerlink" title="欧几里得（gcd）"></a>欧几里得（gcd）</h3><h3 id="扩展欧几里得（exgcd）"><a href="#扩展欧几里得（exgcd）" class="headerlink" title="扩展欧几里得（exgcd）"></a>扩展欧几里得（exgcd）</h3><h3 id="线性筛，欧拉筛"><a href="#线性筛，欧拉筛" class="headerlink" title="线性筛，欧拉筛"></a>线性筛，欧拉筛</h3><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p><strong>PS：计划失败，不更了</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP知识点汇总</title>
      <link href="posts/fb38e193/"/>
      <url>posts/fb38e193/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP知识点汇总"><a href="#NOIP知识点汇总" class="headerlink" title="NOIP知识点汇总"></a>NOIP知识点汇总</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><p>贪心、枚举、分治、二分、倍增、*构造、高精、模拟</p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>最短路（dijkstra、spfa、floyd），差分约束<br>最小生成树（kruskal、prim）<br>并查集（扩展域）<br>拓扑排序<br>二分图染色，*二分图匹配<br>tarjan找scc、桥、割点，缩点<br>*分数规划</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>树上倍增（LCA）<br>树的直径、树的重心<br>dfs序<br>*树链剖分</p><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><p>gcd、lcm<br>埃氏筛法<br>exgcd，求解同余方程、逆元<br>快速幂<br>*组合数学<br>矩阵</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>链表、队列（单调队列）、栈（单调栈）<br>堆、st表、hash表<br>线段树、树状数组<br>字典树<br>*分块</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>背包DP、树形DP、记忆化搜索、递推<br>区间DP、序列DP<br>*DP优化（不涉及斜率优化、四边形不等式等等）</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>暴搜（dfs、bfs）<br>搜索的剪枝<br>启发式搜索（A<em>）<br>迭代加深搜索、</em> IDA*<br>*随机化搜索</p><h2 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h2><p>STL的基本使用方法<br>脑洞的正确使用方法<br>*KMP<br>*状态压缩</p><h1 id="省选知识点汇总"><a href="#省选知识点汇总" class="headerlink" title="省选知识点汇总"></a>省选知识点汇总</h1><h2 id="图论-1"><a href="#图论-1" class="headerlink" title="图论"></a>图论</h2><p>网络流（dinic，SAP，ISAP选一个，费用流写EK就行。<em>zkw费用流），二分图<br>点分治，边分治，</em>动态点分治<br>树链剖分，动态树，树分块<br>虚树，*prufer编码<br>*仙人掌算法</p><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><p>带权并查集<br>Splay（作为平衡树和维护区间），Treap，替罪羊树<br>线段树（权值线段树），树状数组，<em>线段树合并<br>分块，块状链表，</em>双向链表<br>凸包<br>树套树<br>主席树，可持久化trie，<em>其它可持久化数据结构<br>莫队算法，</em>树上莫队，CDQ分治，整体二分<br>二维线段树，<em>KDtree<br><em>舞蹈链，</em>二进制分组，</em>左偏树，<em>超哥线段树，</em>后缀平衡树，*fhqTreap</p><h2 id="字符串相关算法及数据结构"><a href="#字符串相关算法及数据结构" class="headerlink" title="字符串相关算法及数据结构"></a>字符串相关算法及数据结构</h2><p>hash（自然溢出，双hash）<br>kmp，AC自动机，trie<br>后缀数组<br>manacher，最小表示法<br><em>后缀自动机，</em>回文自动机，*后缀树</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>线性筛，积性函数，容斥原理，莫比乌斯反演<br>exgcd，费马小定理，Lucas定理，高中排列组合<br>高斯消元，概率与期望相关<br>中国剩余定理，BSGS，欧拉定理<br>矩阵乘法<br>单纯形法解线性规划<br>FFT<br>线性代数（行列式）<br><em>Simpson积分，高中求导与积分<br>*群论<br>*生成函数， 多项式类算法<br>博弈论相关，</em>密码学，阶，原根<br>计算几何<br>向量的点积/叉积，计算几何基础<br><em>二维计算几何相关，</em>三维计算几何相关<br><em>半平面交，</em>旋转卡壳，*三角剖分</p><h2 id="搜索-1"><a href="#搜索-1" class="headerlink" title="搜索"></a>搜索</h2><h3 id="花式搜索"><a href="#花式搜索" class="headerlink" title="花式搜索"></a>花式搜索</h3><p>A<em>，记忆化搜索，迭代深搜，双向广搜<br>模拟退火，爬山算法，</em>随机增量法</p><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><p>基础DP，树形DP，数位DP，状压DP，期望DP，基环树DP，<em>插头DP<br>斜率优化，矩乘优化，单调队列优化，倍增优化，</em>四边形不等式优化<br>trie图DP，*仙人掌DP<br>其他算法</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>构造，乱搞，随机化，三分法，打表，启发式合并<br>Huffman树，2-sat，*朱刘算法</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idm下载器及其破解</title>
      <link href="posts/bbf782e4/"/>
      <url>posts/bbf782e4/</url>
      
        <content type="html"><![CDATA[<h1 id="破解安装流程"><a href="#破解安装流程" class="headerlink" title="破解安装流程"></a>破解安装流程</h1><ol><li>先去<a href="http://www.internetdownloadmanager.com/">官网</a>下载，然后打开软件检查更新</li><li>使用激活器进行激活<h1 id="激活器"><a href="#激活器" class="headerlink" title="激活器"></a>激活器</h1>找了好久，最有效的应该就是这个了 <a href="https://wwa.lanzous.com/iOa1dg8bh9g">https://wwa.lanzous.com/iOa1dg8bh9g</a><br>可以复制到根目录进行破解，或者直接解压点击破解都行（通常有手就行）<br>记得随便输入上面名字姓氏，会自动生成注册码，然后path</li></ol><h1 id="可以愉快的玩耍了"><a href="#可以愉快的玩耍了" class="headerlink" title="可以愉快的玩耍了"></a>可以愉快的玩耍了</h1><p>新版的这个主题真不错<br><img src="https://pic.downk.cc/item/5f4cd54d160a154a67de6590.png" loading="lazy"></p><h1 id="9月3号更新"><a href="#9月3号更新" class="headerlink" title="9月3号更新"></a>9月3号更新</h1><p>发现上面的破解工具还是有点问题，于是找到了一个更加方便且舒服的版本，只需要安装就行（请先卸载干净之前的）<br><a href="https://wwa.lanzous.com/irS05gbnvwd">idm</a><br>该版本取自大神 <a href="http://www.qiuquan.cc/download/idm.html">QiuQuan</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office2019全套安装及破解</title>
      <link href="posts/c352ef81/"/>
      <url>posts/c352ef81/</url>
      
        <content type="html"><![CDATA[<h1 id="破解版安装流程"><a href="#破解版安装流程" class="headerlink" title="破解版安装流程"></a>破解版安装流程</h1><ol><li>先安装正版，可以去官网下载，或者<a href="https://msdn.itellyou.cn/">msdn</a>找到此页面下载，也可以在下方链接直接下载（推荐使用浏览器集成idm加速下载）<br>idm是一款非常好用的下载工具，安装破解请转<a href="https://zyyyyyih.top/2020/08/31/IDM%E4%B8%8B%E8%BD%BD%E5%99%A8%E5%8F%8A%E5%85%B6%E7%A0%B4%E8%A7%A3/">这里</a></li><li>使用激活器进行激活，可以在百度上寻找，也可以在下方链接下载（注意：激活器的激活时间不是永久，貌似是一年，等我找到永久激活的再补上链接）<br><del>以下链接均为精心收集，速度质量都有保证</del><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><h2 id="各个版本链接"><a href="#各个版本链接" class="headerlink" title="各个版本链接"></a>各个版本链接</h2>各个版本的区别可以百度，大致为软件数量不同和部分功能的支持有一点区别<br>如果不缺内存（指硬盘内存）的话直接专业增强就行（都2020了缺内存就去升级啊喂）<h3 id="专业增强版（强烈推荐）："><a href="#专业增强版（强烈推荐）：" class="headerlink" title="专业增强版（强烈推荐）："></a>专业增强版（强烈推荐）：</h3><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img</a></li></ol><h3 id="专业版："><a href="#专业版：" class="headerlink" title="专业版："></a>专业版：</h3><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Professional2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/Professional2019Retail.img</a></p><h3 id="家庭学生版："><a href="#家庭学生版：" class="headerlink" title="家庭学生版："></a>家庭学生版：</h3><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeStudent2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeStudent2019Retail.img</a></p><h3 id="家庭企业版："><a href="#家庭企业版：" class="headerlink" title="家庭企业版："></a>家庭企业版：</h3><p><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeBusiness2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/HomeBusiness2019Retail.img</a></p><h3 id="破解器"><a href="#破解器" class="headerlink" title="破解器"></a>破解器</h3><p><a href="https://wwa.lanzous.com/ikmOzg8caxe%EF%BC%88%E6%AD%A4%E4%B8%BA%E6%BF%80%E6%B4%BB%E6%9C%89%E6%95%88%E6%9C%9F%E4%B8%80%E5%B9%B4%E7%9A%84%E7%A0%B4%E8%A7%A3%E5%99%A8%EF%BC%8C%E5%BB%BA%E8%AE%AE%E6%94%B6%E7%BA%B3%E5%A5%BD%EF%BC%8C%E4%BB%A5%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%8B%BF%E5%87%BA%E6%9D%A5%E7%94%A8%EF%BC%8C%E6%88%96%E8%80%85%E6%94%B6%E8%97%8F%E6%9C%AC%E6%96%87%EF%BC%89">https://wwa.lanzous.com/ikmOzg8caxe（此为激活有效期一年的破解器，建议收纳好，以后可以拿出来用，或者收藏本文）</a></p><h1 id="一键安装器激活软件（很好用）"><a href="#一键安装器激活软件（很好用）" class="headerlink" title="一键安装器激活软件（很好用）"></a>一键安装器激活软件（很好用）</h1><p>此软件可以根据自身需求进行软件安装，安装过程需要耐心等待（本人使用的是这个）<br><a href="https://wwa.lanzous.com/i40rv8f">https://wwa.lanzous.com/i40rv8f</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idm </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPT小白成神之路</title>
      <link href="posts/1454277d/"/>
      <url>posts/1454277d/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="学会使用软件"><a href="#学会使用软件" class="headerlink" title="学会使用软件"></a>学会使用软件</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>在这里推荐使用最新版本的PowerPoint<br>office全套破解安全看这里<a href="https://zyyyyyih.top/2020/08/31/office2019%E5%85%A8%E5%A5%97%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/">office安装</a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>大部分可以通过计算机日常操作的常识解决，这里提一些比较有用的点</p><ul><li>鼠标左键按住空白处拖动可以框选元素，选中的元素可以按<code>delete</code>键删除</li><li>选中元素后上方会出现格式选项卡，可以很方便的对目标元素进行调整</li><li>使用图形时，部分图形（以圆形和矩形为例），长按shift再进行拖动可以固定横纵比为1：1（即正方形或者正圆形），长按ctrl可以从以鼠标点为中心扩展出该图形，同时按住shift和ctrl即综合两种效果，从鼠标向外扩展出1：1的图形（更多图形可以自己尝试）</li><li>ctrl+c复制ctrl+v粘贴，ctrl+D可以重复这一次操作（且可以保持上一次复制移动的距离，什么意思自己复制试试看）</li><li>插入图片后使用背景清除可以进行简单的抠图（细致的请移步PS）<h2 id="什么才是好看的ppt"><a href="#什么才是好看的ppt" class="headerlink" title="什么才是好看的ppt"></a>什么才是好看的ppt</h2><h3 id="学习审美"><a href="#学习审美" class="headerlink" title="学习审美"></a>学习审美</h3>审美的实质：脑子里好作品的积累量<br>所以我们需要在前期大量积累，建立素材库来提高自己的审美<h3 id="优秀设计网站推荐"><a href="#优秀设计网站推荐" class="headerlink" title="优秀设计网站推荐"></a>优秀设计网站推荐</h3><a href="https://www.zcool.com.cn/">站酷网</a><br><a href="https://huaban.com/">花瓣网</a><br><a href="https://www.58pic.com/">千图网</a><br><a href="https://www.designspiration.com/">Designspiration</a><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="选择适合的字体很重要"><a href="#选择适合的字体很重要" class="headerlink" title="选择适合的字体很重要"></a>选择适合的字体很重要</h2>比如：商务型的ppt较为严谨，应该使用微软雅黑这种风格的字体<br>  中国一些人文的介绍，抗战的热血场面，适合大气的毛笔字体<br>  ······<h2 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h2><a href="http://fonts.mobanwang.com/">模板王</a><br><a href="http://font.chinaz.com/">站长素材</a></li></ul><h1 id="PPT形状玩法"><a href="#PPT形状玩法" class="headerlink" title="PPT形状玩法"></a>PPT形状玩法</h1><h2 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h2><h3 id="学会利用【合并形状】功能"><a href="#学会利用【合并形状】功能" class="headerlink" title="学会利用【合并形状】功能"></a>学会利用【合并形状】功能</h3><p>按住ctrl，按照不同的先后顺序选择图形，再使用合并形状功能<br>悬停可以预览，选中图形时的不同顺序会影响最终效果，多多尝试<br><img src="https://pic.downk.cc/item/5f4cd54d160a154a67de6592.png" loading="lazy"></p><h3 id="组合图形"><a href="#组合图形" class="headerlink" title="组合图形"></a>组合图形</h3><p>可以将多个图形组合成一个整体<br><img src="https://pic.downk.cc/item/5f4cd54d160a154a67de6595.png" loading="lazy"></p><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p><a href="http://iconfont.cn/">阿里巴巴矢量图标库</a>安利！！！好用且免费</p><h1 id="用好图片，让PPT更富有视觉冲击力"><a href="#用好图片，让PPT更富有视觉冲击力" class="headerlink" title="用好图片，让PPT更富有视觉冲击力"></a>用好图片，让PPT更富有视觉冲击力</h1><h2 id="图片素材网站推荐（无版权可以免费使用）"><a href="#图片素材网站推荐（无版权可以免费使用）" class="headerlink" title="图片素材网站推荐（无版权可以免费使用）"></a>图片素材网站推荐（无版权可以免费使用）</h2><p><a href="https://pixabay.com/">Pixabay</a><br><a href="https://www.pexels.com/zh-cn/">Pexels</a>支持中文搜索<br><a href="http://thestocks.im/">thestocks</a>集合了多家图库，速度一般<br><a href="https://cn.bing.com/">必应</a>的图片搜索引擎比百度好多了，而且筛选器的功能强大<br><img src="https://wx2.sbimg.cn/2020/08/31/6ZyPV.png" alt="6ZyPV.png" loading="lazy"></p><h1 id="配色的方法"><a href="#配色的方法" class="headerlink" title="配色的方法"></a>配色的方法</h1><p>一般优秀的ppt作品都是选取好了3-5种颜色作为主要使用的颜色，过少的颜色会显得单调，而过多的颜色大概率会翻车，让人感觉眼花缭乱没有重点。</p><h2 id="最简单的方法，从图片中取色"><a href="#最简单的方法，从图片中取色" class="headerlink" title="最简单的方法，从图片中取色"></a>最简单的方法，从图片中取色</h2><p>设定一张大致符合主题的图片作为整套ppt的背景，然后从中选取出3-5种颜色，用图形存放在一旁，以便使用<br>像这样,我从图中这四个点取了四个颜色，并用圆形存在了ppt的外围，下次使用可以直接从上面取色，是不是很方便<br><img src="https://pic.downk.cc/item/5f4ccac0160a154a67d3c9ec.png" loading="lazy"></p><p>也可以参考优秀的平面设计作品并从中取色</p><h2 id="学习色彩理论，搭配舒适的颜色"><a href="#学习色彩理论，搭配舒适的颜色" class="headerlink" title="学习色彩理论，搭配舒适的颜色"></a>学习色彩理论，搭配舒适的颜色</h2><p><a href="http://www.peise.net/palette/">优秀的色彩搭配网站</a><br><del>又白嫖</del></p><h1 id="PPT的排版"><a href="#PPT的排版" class="headerlink" title="PPT的排版"></a>PPT的排版</h1><h2 id="排版四原则"><a href="#排版四原则" class="headerlink" title="排版四原则"></a>排版四原则</h2><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p><img src="https://pic.downk.cc/item/5f4ccd10160a154a67d58fd0.png" loading="lazy"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://pic.downk.cc/item/5f4ccd10160a154a67d58fd2.png" loading="lazy"></p><h3 id="亲密"><a href="#亲密" class="headerlink" title="亲密"></a>亲密</h3><p><img src="https://pic.downk.cc/item/5f4ccd10160a154a67d58fd4.png" loading="lazy"></p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p><img src="https://pic.downk.cc/item/5f4ccd10160a154a67d58fd6.png" loading="lazy"></p><h2 id="经典版面"><a href="#经典版面" class="headerlink" title="经典版面"></a>经典版面</h2><h3 id="左右分割"><a href="#左右分割" class="headerlink" title="左右分割"></a>左右分割</h3><p><img src="https://pic.downk.cc/item/5f4ccf4a160a154a67d79307.png" loading="lazy"></p><h3 id="上下分割"><a href="#上下分割" class="headerlink" title="上下分割"></a>上下分割</h3><p><img src="https://pic.downk.cc/item/5f4ccf4a160a154a67d79309.png" loading="lazy"></p><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><p><img src="https://pic.downk.cc/item/5f4ccf4a160a154a67d7930b.png" loading="lazy"></p><h3 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h3><p><img src="https://pic.downk.cc/item/5f4ccf4a160a154a67d7930d.png" loading="lazy"></p><h3 id="矩阵排列"><a href="#矩阵排列" class="headerlink" title="矩阵排列"></a>矩阵排列</h3><p><img src="https://pic.downk.cc/item/5f4ccf4a160a154a67d79316.png" loading="lazy"></p><h1 id="极度舒适的动画效果"><a href="#极度舒适的动画效果" class="headerlink" title="极度舒适的动画效果"></a>极度舒适的动画效果</h1><h2 id="使用动画窗格提升效率"><a href="#使用动画窗格提升效率" class="headerlink" title="使用动画窗格提升效率"></a>使用动画窗格提升效率</h2><p>可以批量修改动画非常方便<br><img src="https://pic.downk.cc/item/5f4cd143160a154a67d9b344.png" loading="lazy"><br><img src="https://pic.downk.cc/item/5f4cd143160a154a67d9b348.png" loading="lazy"></p><h2 id="设置平滑结束-开始，使得动画自然不生硬"><a href="#设置平滑结束-开始，使得动画自然不生硬" class="headerlink" title="设置平滑结束/开始，使得动画自然不生硬"></a>设置平滑结束/开始，使得动画自然不生硬</h2><p>双击动画窗格中的某一个动画，可以设置更多属性<br>最重要的就是这个平滑结束和平滑开始<br>比如这个飞入动画（自己试试看就知道了）<br><img src="https://pic.downk.cc/item/5f4cd143160a154a67d9b34a.png" loading="lazy"></p><h1 id="制作PPT的思想"><a href="#制作PPT的思想" class="headerlink" title="制作PPT的思想"></a>制作PPT的思想</h1><h2 id="简单高效，符合场景，拒绝花里胡哨"><a href="#简单高效，符合场景，拒绝花里胡哨" class="headerlink" title="简单高效，符合场景，拒绝花里胡哨"></a>简单高效，符合场景，拒绝花里胡哨</h2><p>这是绝大多数工作型ppt的要求<br>因此我们需要建立自己的素材库<br><img src="https://pic.downk.cc/item/5f4cd262160a154a67db0680.png" loading="lazy"></p><p><img src="https://pic.downk.cc/item/5f4cd316160a154a67dbd2e4.png" loading="lazy"></p><p><img src="https://pic.downk.cc/item/5f4cd1c2160a154a67da4425.png" loading="lazy"></p><p><img src="https://pic.downk.cc/item/5f4cd1c2160a154a67da442a.png" loading="lazy"></p><p><img src="https://pic.downk.cc/item/5f4cd1c2160a154a67da4436.png" loading="lazy"></p><p><img src="https://pic.downk.cc/item/5f4cd1c2160a154a67da443a.png" loading="lazy"></p><p>再来安利，成熟的ppt模板，大量的素材可以在这积累<br><a href="http://www.yanj.cn/">演界网</a></p><p>本文内容总结自<a href="https://www.weibo.com/278582233?refer_flag=1005055010_&is_all=1#_rnd1598870572870">@珞珈Carlos</a>老师的ppt教程</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天津旅游规划</title>
      <link href="posts/bafae3ac/"/>
      <url>posts/bafae3ac/</url>
      
        <content type="html"><![CDATA[<h1 id="天津我们来了"><a href="#天津我们来了" class="headerlink" title="天津我们来了"></a>天津我们来了</h1><p><strong>大致路线如下：</strong></p><h3 id="1-Day1（15号）"><a href="#1-Day1（15号）" class="headerlink" title="1. Day1（15号）"></a>1. Day1（15号）</h3><ul><li>航班于15：35到达机场，前往雅米设计酒店，路程约40min，旅程大致于17：00正式开始（可能由于其他原因延迟一点，不影响后面行程）。<br><img src="https://cdn.jsdelivr.net/gh/zyyyyyih/zyyyyyih.github.io@latest/images/tianjing1.png" alt="酒店位置以及周边" loading="lazy"><br>我们接下里参观 世纪钟广场-&gt; 海河广场，前往海河游船（订购19：30的票），观光一圈（大约50min）<code>路线经过</code>，下船后前往津湾广场欣赏夜景（这里夜景很美），看时间回酒店休息。<h3 id="2-Day2（16号）"><a href="#2-Day2（16号）" class="headerlink" title="2. Day2（16号）"></a>2. Day2（16号）</h3><img src="https://cdn.jsdelivr.net/gh/zyyyyyih/zyyyyyih.github.io@latest/images/tianjing2.png" alt="行程地图1" loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/zyyyyyih/zyyyyyih.github.io@latest/images/tianjing3.png" alt="行程地图2" loading="lazy"></li><li>8：00出发前往意风区（午饭意风区解决），中午前往古文化区（晚饭饭古文化区解决），可去旺海国际广场，天津之眼（不推荐乘坐），大悲禅院游览，晚上有时间多可以在海河中心广场游荡<br><code>细节有待我搜索补充</code><h3 id="3-Day3（17号）"><a href="#3-Day3（17号）" class="headerlink" title="3. Day3（17号）"></a>3. Day3（17号）</h3><img src="https://cdn.jsdelivr.net/gh/zyyyyyih/zyyyyyih.github.io@latest/images/tianjing4.png" alt="行程地图3" loading="lazy"></li><li>8：00出发前往五大道（午饭在五大道解决），下午去原日本殖民区（重点游览西开教堂以及瓷房子）<br><code>细节有待我搜索补充</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游玩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的字符函数</title>
      <link href="posts/417c2b55/"/>
      <url>posts/417c2b55/</url>
      
        <content type="html"><![CDATA[<h2 id="长度计算"><a href="#长度计算" class="headerlink" title="长度计算"></a>长度计算</h2><h3 id="strlen-s1"><a href="#strlen-s1" class="headerlink" title="strlen(s1)"></a><code>strlen(s1)</code></h3><p>作用：得到s1的实际长度</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span><span class="token comment">//eg:hello</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//结果为 5</span></code></pre><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><h3 id="strcpy-s1-s2"><a href="#strcpy-s1-s2" class="headerlink" title="strcpy(s1, s2);"></a><code>strcpy(s1, s2);</code></h3><p>作用：将s2中的内容完全放入s1中，s1原来的内容不会被保留，可以理解为赋值符号</p><ul><li>没有要求s2一定要比s1短或者长</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//结果输出两行hello</span></code></pre><h3 id="strncpy-s1-s2-n"><a href="#strncpy-s1-s2-n" class="headerlink" title="strncpy(s1, s2, n);"></a><code>strncpy(s1, s2, n);</code></h3><p>作用：将s2的前n个字符替换进s1的前n个中</p><ul><li>需要满足n小于等于s1，s2的长度才可以正常使用</li></ul><p>正常：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I'm LiHua"</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span> s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出I'mlo world</span></code></pre><p>若n超出s2长度</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">//长度11</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I'm LiHua"</span><span class="token punctuation">;</span><span class="token comment">//长度9</span><span class="token function">strncpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若大于12也为此结果</span>cout<span class="token operator">&lt;&lt;</span> s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出I'm LiHua</span></code></pre><p>若s1长度小于s2，n又超过了s1长度则不合法，无法得到正常结果<br>但有一种情况是正常的</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">//给定长度</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I'm LiHuaaaaaaaaaaa"</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未超过给定长度17，但是超过了字符串实际长度11</span>cout<span class="token operator">&lt;&lt;</span> s1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="strcat-s1-s2"><a href="#strcat-s1-s2" class="headerlink" title="strcat(s1, s2);"></a><code>strcat(s1, s2);</code></h3><h2 id="比较strcmp-s1-s2"><a href="#比较strcmp-s1-s2" class="headerlink" title="比较strcmp(s1, s2);"></a>比较<code>strcmp(s1, s2);</code></h2><h2 id="查找strchr-s1-ch"><a href="#查找strchr-s1-ch" class="headerlink" title="查找strchr(s1, ch);"></a>查找<code>strchr(s1, ch);</code></h2><h2 id="字串strstr-s1-s2"><a href="#字串strstr-s1-s2" class="headerlink" title="字串strstr(s1, s2);"></a>字串<code>strstr(s1, s2);</code></h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ST表模板</title>
      <link href="posts/eeaad1e3/"/>
      <url>posts/eeaad1e3/</url>
      
        <content type="html"><![CDATA[<h1 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h1><p>ST表的功能很简单</p><p>它是解决RMQ问题(区间最值问题)的一种强有力的工具</p><p>它可以做到$O(nlogn)$预处理，$O(1)$查询最值</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>ST表是利用的是倍增的思想</p><p>拿最大值来说</p><p>我们用$Max[i][j]$表示，从$i$位置开始的$2^j$个数中的最大值，例如$Max[i][1]$表示的是$i$位置和$i+1$位置中两个数的最大值</p><p>那么转移的时候我们可以把当前区间拆成两个区间并分别取最大值（注意这里的编号是从$1$开始的）<br>查询的时候也比较简单<br>我们计算出$log_2$区间长度</p><p>然后对于左端点和右端点分别进行查询，这样可以保证一定可以覆盖查询的区间</p><p>刚开始学的时候我不太理解为什么从右端点开始查的时候左端点是$r-2^k+1$</p><p>实际很简单，因为我们需要找到一个点$x$，使得$x+2^{k}-1=d$</p><p>这样的话就可以得到$x=r-2^k+1$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向下取整</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l <span class="token punctuation">,</span> r<span class="token punctuation">;</span>l <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>r <span class="token operator">-</span> p<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左闭右开区间</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="posts/d95d7e09/"/>
      <url>posts/d95d7e09/</url>
      
        <content type="html"><![CDATA[<h2 id="我的hexo博客正式开始运行"><a href="#我的hexo博客正式开始运行" class="headerlink" title="我的hexo博客正式开始运行"></a>我的hexo博客正式开始运行</h2><p>这里记载的是我的一些个人的学习轨迹<br>这第一篇文章就水掉吧，也是测试一下</p><hr><hr><p>（我是分割线</p><h2 id="代码的高亮效果测试"><a href="#代码的高亮效果测试" class="headerlink" title="代码的高亮效果测试"></a>代码的高亮效果测试</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">+</span> m  <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>测试结束</p>]]></content>
      
      
      <categories>
          
          <category> 随手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
